description = 'OpenSRP core client library'

buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsBuildGradle"
        classpath 'org.apache.commons:commons-lang3:3.3.2'
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
        classpath 'io.fabric.tools:gradle:1.30.0'
    }
}

allprojects {
    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenLocal()
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
}

apply plugin: 'com.android.library'
//apply plugin: 'org.robolectric'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'maven-publish'
jacoco {
    toolVersion = "0.8.0"
}

android {
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion
    useLibrary 'org.apache.http.legacy'

    defaultPublishConfig !isReleaseBuild() ? "debug" : "release"

    signingConfigs {
        config {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("$rootDir/assets/security/debug.keystore")
            storePassword 'android'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled = true
            signingConfig signingConfigs.config
            zipAlignEnabled true
            buildConfigField "String", "TRUST_MANAGER_ALGORITHM", "\"X509\""
            buildConfigField "String", "SSL_CONTEXT_PROTOCOL", "\"TLSv1.2\""
            buildConfigField "String", "OPENSRP_TRUSTORE_PASS", "\"phone red pen\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            zipAlignEnabled true
            buildConfigField "String", "TRUST_MANAGER_ALGORITHM", "\"X509\""
            buildConfigField "String", "SSL_CONTEXT_PROTOCOL", "\"TLSv1.2\""
            buildConfigField "String", "OPENSRP_TRUSTORE_PASS", "\"phone red pen\""
        }
    }

    lintOptions {
        abortOnError false
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        // Enabling multidex support.
        multiDexEnabled true
        //applicationId "org.smartregister"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"

        project.archivesBaseName = "opensrp-client-core"
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDir 'src/main/java'
            res.srcDirs = ['res']
            assets.srcDir 'assets'
            jniLibs.srcDirs 'src/main/native'
            resources.srcDir 'resources'
        }
        androidTest.setRoot('src/androidTest')
    }

    aaptOptions {
        noCompress 'apk'
    }

    // avoid errors with message 'Duplicate files copied in APK ...'
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

def filesToCopy = copySpec {
    from "${projectDir}/src/test/resources"
}

task copyTestResources() {
    def path = "${buildDir}/intermediates/classes/test"
    def paths = ["${path}/debug", "${path}/release"]
    paths.each { dest ->
        copy {
            with filesToCopy
            into dest
        }
    }
}

afterEvaluate {
    assembleDebug.dependsOn(copyTestResources)
}
configurations.all {
    resolutionStrategy.force 'commons-codec:commons-codec:1.10'
}

def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

def getVersionName = { ->
    return "1.8.31-DTREE-4-SNAPSHOT" // Library version
}

def getArtificatId = { ->
    return "opensrp-client-core" // Library name
}

publishing {

    repositories {
        maven {
            name = "GitHubPackages"
            /** Configure path of your package repository on Github
             ** Replace GITHUB_USERID with your/organisation Github userID
             ** and REPOSITORY with the repository name on GitHub
             */
            url = uri("https://maven.pkg.github.com/d-tree-org/opensrp-client-core")
            credentials {
                /** Create github.properties in root project folder file with
                 ** gpr.usr=GITHUB_USER_ID & gpr.key=PERSONAL_ACCESS_TOKEN
                 ** Set env variable GPR_debugdebugUSER & GPR_API_KEY if not adding a properties file**/

                username = githubProperties['gpr.usr'] ?: System.getenv("GPR_USER")
                password = githubProperties['gpr.key'] ?: System.getenv("GPR_API_KEY")
            }
        }
    }

    publications {
        bar(MavenPublication) {
            groupId 'org.smartregister' // Library groupID
            artifactId getArtificatId()
            version getVersionName()
            artifact("$buildDir/outputs/aar/${getArtificatId()}-debug.aar")

            //This is to carter for transitive dependencies within this library
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == 'unspecified')
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)
                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionsNode = dependencyNode.appendNode('exclusions')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            def exclusion = exclusionsNode.appendNode('exclusion')
                            exclusion.appendNode('groupId', rule.group ?: '*')
                            exclusion.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getDependencies().each { dep -> addDependency(dep, 'compile') }
                configurations.api.getDependencies().each { dep -> addDependency(dep, 'compile') }
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, 'runtime') }
            }

        }
    }
}

dependencies {
    implementation 'net.zetetic:android-database-sqlcipher:4.1.3'
    implementation 'com.android.support:multidex:1.0.0'
    implementation 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:support-v4:28.0.0'
    implementation "org.apache.httpcomponents:httpmime:4.2.3"
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.10'
    implementation group: 'com.google.guava', name: 'guava', version: '20.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.4'
    implementation 'org.apache.commons:commons-lang3:3.2'
    implementation 'org.mozilla:rhino:1.7R4'
    implementation 'com.ocpsoft:ocpsoft-pretty-time:1.0.7'
    api 'joda-time:joda-time:2.10.3'
    implementation 'com.github.bmelnychuk:atv:1.2.9'
    implementation 'com.github.johnkil.print:print:1.2.3'

    implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }

    implementation('ch.acra:acra:4.5.0') {
        exclude group: 'org.json', module: 'json'
    }

    implementation 'com.github.ybq:Android-SpinKit:1.2.0'
    implementation 'com.mcxiaoke.volley:library:1.0.19'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    annotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')

    implementation 'com.cloudant:cloudant-http:2.7.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'

    implementation('com.android.support:design:28.0.0') {
        exclude group: 'com.android.support', module: 'recyclerview-v7'
        exclude group: 'com.android.support', module: 'cardview-v7'
    }

    implementation 'com.evernote:android-job:1.2.6'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.6'
    implementation 'de.hdodenhof:circleimageview:2.2.0'

    implementation('org.smartregister:android-p2p-sync:0.3.3-SNAPSHOT') {
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'android.arch.core', module: 'runtime'
    }
}

dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation 'junit:junit:4.12'

    testImplementation group: 'com.google.android', name: 'android-test', version: '4.1.1.4'
    testImplementation 'org.apache.maven:maven-ant-tasks:2.1.3'
    testImplementation 'org.mockito:mockito-core:1.9.5'
    testAnnotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')

    testImplementation('org.robolectric:robolectric:3.8') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.apache.maven', module: 'maven-model'
        exclude group: 'com.android.support'
        exclude group: 'com.thoughtworks.xstream', module: 'xstream'
    }
    testImplementation('org.robolectric:shadows-multidex:3.8') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    testImplementation('org.robolectric:shadows-support-v4:3.3.2') {
        exclude group: 'com.google.guava', module: 'guava'
    }

    testImplementation "org.robolectric:shadows-support-v4:3.3.2"
    // PowerMock
    def powerMockVersion = '1.7.1'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation("org.powermock:powermock-classloading-xstream:$powerMockVersion")
}

task clearJar(type: Delete) {
    delete 'build/libs/myCompiledLibrary.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', 'myCompiledLibrary.jar')
}

makeJar.dependsOn(clearJar, build)

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

tasks.register("prepareKotlinBuildScriptModel"){}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
}

apply from: '../maven.gradle'
